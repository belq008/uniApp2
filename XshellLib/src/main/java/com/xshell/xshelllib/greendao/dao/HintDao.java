package com.xshell.xshelllib.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.xshell.xshelllib.greendao.bean.Hint;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HINT".
*/
public class HintDao extends AbstractDao<Hint, Long> {

    public static final String TABLENAME = "HINT";

    /**
     * Properties of entity Hint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UsrId = new Property(1, int.class, "usrId", false, "USR_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property TargetId = new Property(3, String.class, "targetId", false, "TARGET_ID");
        public final static Property UnReadCount = new Property(4, Integer.class, "unReadCount", false, "UN_READ_COUNT");
        public final static Property LastMessage = new Property(5, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property LastReadTime = new Property(6, String.class, "lastReadTime", false, "LAST_READ_TIME");
        public final static Property LocalMessageTime = new Property(7, String.class, "localMessageTime", false, "LOCAL_MESSAGE_TIME");
    };


    public HintDao(DaoConfig config) {
        super(config);
    }
    
    public HintDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USR_ID\" INTEGER NOT NULL ," + // 1: usrId
                "\"TYPE\" TEXT," + // 2: type
                "\"TARGET_ID\" TEXT," + // 3: targetId
                "\"UN_READ_COUNT\" INTEGER," + // 4: unReadCount
                "\"LAST_MESSAGE\" TEXT," + // 5: lastMessage
                "\"LAST_READ_TIME\" TEXT," + // 6: lastReadTime
                "\"LOCAL_MESSAGE_TIME\" TEXT);"); // 7: localMessageTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HINT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Hint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUsrId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(4, targetId);
        }
 
        Integer unReadCount = entity.getUnReadCount();
        if (unReadCount != null) {
            stmt.bindLong(5, unReadCount);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(6, lastMessage);
        }
 
        String lastReadTime = entity.getLastReadTime();
        if (lastReadTime != null) {
            stmt.bindString(7, lastReadTime);
        }
 
        String localMessageTime = entity.getLocalMessageTime();
        if (localMessageTime != null) {
            stmt.bindString(8, localMessageTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Hint readEntity(Cursor cursor, int offset) {
        Hint entity = new Hint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // usrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // targetId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // unReadCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastMessage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastReadTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // localMessageTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Hint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsrId(cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTargetId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnReadCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLastMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastReadTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocalMessageTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Hint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Hint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
